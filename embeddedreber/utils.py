import csv

def get_words(er, n, distinct=True):
    """Retrieves a list of n words based off an embedded Reber.

    Parameters
    ----------
    er : EmbeddedReber object.

    n : int
        The number of words to generate.

    distinct : bool
        True if the list of new words should be unique. False will give the first n words.

    Returns
    -------
    list
        A list of n words generated by simulations from the 'er' graph.

    Examples
    --------
    To get 10 unique words based of an embedded Reber grammar.

        >>> er = EmbeddedReber('BTSXSPXTVPVE')
        >>> words = get_words(eb, 10)

    To get 10 non-unique words based of an embedded Reber grammar.

        >>> er = EmbeddedReber('BTSXSPXTVPVE')
        >>> words = get_words(eb, 10, False)

    """

    words = []

    if distinct:
        while len(words) < n:
            er.simulate()

            if er.word in words:
                continue

            words.append(er.word)

    else:
        for i in range(n):
            er.simulate()
            words.append(er.word)

    return words


def write_words(filepath, true_words, false_words):
    """Retrieves a list of n words based off an embedded Reber.

    Parameters
    ----------
    filepath : str
        The path to the file that the csv will be written to.

    true_words : list
        List of words that conform to true words for model training purposes.

    false_words: list
        List of words that are deemed false words for model training purposes.
    """

    fieldnames = ['class', 'word']

    with open(filepath, 'w', newline='') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()

        for word in true_words:
            writer.writerow({'class': 1, 'word': word})

        for word in false_words:
            writer.writerow({'class': 0, 'word': word})